## Requirements Specifications:
**1.	Functional Requirements:
•	Add a student (id, name)
•	Remove a student
•	Enroll a student in a course (one student -> many courses)
•	Remove a course from a student
•	Assign grades to a student in a course (multiple grades per course? Or just one grade per course?)
•	Calculate the average grade for a course (per student) 
•	Calculate the overall GPA of a student (across all courses) (id, name, each course with grades and average, plus overall GPA).
•	Display all students, their courses, and grades
•	Save and load student data from a file (persist and restore all data to/from JSON so data survives across runs.
•	Provide menu-driven command line interfacing with exactly the options of:
 
**2.	Non-functional requirements:
•	OOP: Use classes/objects; clear separation of concerns
•	Usability: Input validation with helpful error messages; no crashes from bad input
•	Maintainability: Docstrings, readable code, single responsibility per class.
•	Portability: Standard Python 3
•	Persistence Format: stable human-readable.

**3.	Constraints and Assumptions:
•	Grades are numeric (float or int)
•	GPA is unweighted average of course averages (no credits/weights)
•	Student IDs are unique
•	A student can exist with zero courses & courses can exist with zero grades (if average is does not exist, course grades are not counted in GPA).
